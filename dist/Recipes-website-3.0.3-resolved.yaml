---
openapi: 3.0.0
info:
  title: Recipes-website API
  description: Web Development Project
  version: 3.0.3
servers:
- url: https://virtserver.swaggerhub.com/EITANMARKMAN8/Recipes-website/3.0.3
  description: SwaggerHub API Auto Mocking
paths:
  /recipes:
    get:
      tags:
      - recipes
      summary: Get data of all the recipes available
      responses:
        "200":
          description: Client asks to show all the recipes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipes'
        "404":
          description: No recipes found
    post:
      tags:
      - recipes
      summary: Add a new recipe
      description: Method to add new recipe to all the recipes list
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Recipe'
        required: true
      responses:
        "201":
          description: Recipe created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
        "400":
          description: "Invalid input, invalid recipe"
        "409":
          description: An existing recipe already exists
  /recipes/{recipeId}:
    get:
      tags:
      - recipes
      summary: Get data of a specific recipe
      parameters:
      - name: recipeId
        in: path
        description: ID of the recipe to retrieve
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
        "404":
          description: Recipe not found
  /register:
    post:
      tags:
      - users
      summary: Add a new user
      description: Method to add a new user to the list of users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: "Invalid input, object invalid"
        "409":
          description: An existing user already exists
      security: []
  /users/{userId}/favorite-recipes:
    get:
      tags:
      - users
      summary: Get a user's favorite recipes
      description: Returns a list of all the recipes that the specified user has marked as favorite
      parameters:
      - name: userId
        in: path
        description: The ID of the user whose favorite recipes to retrieve
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
      responses:
        "200":
          description: List of favorite recipes for the user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
        "404":
          description: User not found
    post:
      tags:
      - users
      summary: Add a recipe to user's favorite recipes
      description: Adds a recipe with the specified ID to the user's list of favorite recipes
      parameters:
      - name: userId
        in: path
        description: The ID of the user who wants to add a recipe to their favorite recipes
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
      - name: recipeId
        in: query
        description: The ID of the recipe to add to the user's favorite recipes
        required: true
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
      responses:
        "200":
          description: Recipe added successfully to favorite recipes
        "400":
          description: "Invalid input, invalid user ID or recipe ID"
        "404":
          description: User or recipe not found
  /users/{userId}/my-recipes:
    get:
      tags:
      - users
      summary: Get a user's own recipes
      description: Returns a list of all the recipes that the specified user has created
      parameters:
      - name: userId
        in: path
        description: The ID of the user whose recipes to retrieve
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
      responses:
        "200":
          description: List of user's recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
        "404":
          description: Recipe not found
    post:
      tags:
      - users
      summary: Add a recipe to user's own recipes
      description: Adds a recipe with the specified ID to the user's list of own recipes
      parameters:
      - name: userId
        in: path
        description: The ID of the user who wants to add a recipe to their own recipes
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
      - name: recipeId
        in: query
        description: The ID of the recipe to add to the user's own recipes
        required: true
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
      responses:
        "200":
          description: Recipe added successfully to own recipes
        "400":
          description: "Invalid input, invalid user ID or recipe ID"
        "404":
          description: User or recipe not found
  /users/{userId}/family-recipes:
    get:
      tags:
      - users
      summary: Get a user's family recipes
      description: Returns a list of all the recipes that the specified user's family has shared with them
      parameters:
      - name: userId
        in: path
        description: The ID of the user whose family recipes to retrieve
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
      responses:
        "200":
          description: List of family recipes for the user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
        "404":
          description: User not found
    post:
      tags:
      - users
      summary: Add a recipe to user's family recipes
      description: Adds a recipe with the specified ID to the user's family list of recipes
      parameters:
      - name: userId
        in: path
        description: The ID of the user who wants to add a recipe to their family recipes
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
      - name: recipeId
        in: query
        description: The ID of the recipe to add to the user's family recipes
        required: true
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
      responses:
        "200":
          description: Recipe added successfully to family recipes
        "400":
          description: "Invalid input, invalid user ID or recipe ID"
        "404":
          description: User or recipe not found
  /about:
    get:
      tags:
      - about
      summary: Get information about the webpage
      description: "Method to get information about the webpage, such as the name, version, and description"
      responses:
        "200":
          description: Information about the webpage
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
      security: []
  /login:
    post:
      tags:
      - users
      summary: Authenticate user with username and password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login_body'
        required: true
      responses:
        "200":
          description: User authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "401":
          description: "Unauthorized access, invalid credentials"
        "404":
          description: User not found
      security: []
  /search:
    get:
      tags:
      - recipes
      summary: Search recipes by ingredients or name
      description: Method to search for recipes that match the given criteria
      parameters:
      - name: name
        in: query
        description: The name of the recipe to search for
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: ingredients
        in: query
        description: "The ingredients of the recipe to search for, separated by commas"
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Recipe search successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
        "400":
          description: "Invalid input, query parameters invalid"
        "404":
          description: No recipes found
      security: []
components:
  schemas:
    Recipes:
      type: array
      description: Model containing a list of recipes
      items:
        $ref: '#/components/schemas/Recipe'
    Recipe:
      type: object
      properties:
        id:
          type: integer
          description: id of the recipe
          example: 13
        image_url:
          type: string
          description: URL for recipe's image
          format: URL
          example: https://www.bbcgoodfood.com/recipes/collection/easy-recipes
        title:
          type: string
          description: recipe's title/name
          example: Tasty Pizza with pineapples
        preparation_time:
          maximum: 240
          minimum: 1
          type: integer
          description: preparation time in minutes
          example: 25
        popularity:
          minimum: 0
          type: integer
          description: Quantity of likes the recipe received
          example: 120
        is_vegan:
          type: string
          description: Indicates whether the recipe is vegan/Vegetarian/None of those
          example: Vegan
          enum:
          - Vegan
          - Vegetarian
          - None
        is_gluten_free:
          type: boolean
          description: Indicates whether the recipe is gluten free or not.
          example: true
        is_viewed:
          type: boolean
          description: Indicates whether the user already entered the recipe's link or not.
          example: false
        is_favorite:
          type: boolean
          description: Indicates whether the user added the recipe to his favorites or not.
          example: false
      description: Model containing recipe info
    User:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier for the user.
        username:
          type: string
          description: The username for the user.
        firstName:
          type: string
          description: The first name of the user.
        lastName:
          type: string
          description: The last name of the user.
        country:
          type: string
          description: The country of the user.
        password:
          type: string
          description: The password for the user's account.
        email:
          type: string
          description: The email address of the user.
    inline_response_200:
      type: object
      properties:
        name:
          type: string
          description: The name of the webpage
        version:
          type: string
          description: The version of the webpage
        description:
          type: string
          description: A description of the webpage
    login_body:
      type: object
      properties:
        username:
          type: string
          description: The username of the user to authenticate
        password:
          type: string
          description: The password of the user to authenticate
